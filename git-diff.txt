diff --git a/app/layout.tsx b/app/layout.tsx
index d55f068..ec95844 100644
--- a/app/layout.tsx
+++ b/app/layout.tsx
@@ -12,7 +12,7 @@ export default function RootLayout({
 }) {
   return (
     <html lang="en">
-      <body className="min-h-screen bg-neutral-50 text-neutral-900">
+      <body className="flex h-dvh flex-col bg-neutral-50 text-neutral-900">
         {children}
       </body>
     </html>
diff --git a/app/page.tsx b/app/page.tsx
index 38b409d..ee2be47 100644
--- a/app/page.tsx
+++ b/app/page.tsx
@@ -2,7 +2,7 @@ import AILearningGraph from "@/components/AILearningGraph";
 
 export default function Page() {
   return (
-    <div className="min-h-screen bg-neutral-50 flex flex-col">
+    <main className="flex-1 min-h-0 flex flex-col">
       {/* Compact Top Navigation Bar with Title and Controls */}
       <nav className="bg-white border-b border-gray-200 shadow-sm flex-shrink-0">
         <div className="px-4 py-3">
@@ -18,7 +18,6 @@ export default function Page() {
                 </p>
               </div>
             </div>
-
             {/* Right: Branding */}
             <div className="flex items-center space-x-4">
               <div className="text-xs text-gray-500 flex items-center">
@@ -33,9 +32,9 @@ export default function Page() {
       </nav>
 
       {/* Main Content - Full Screen Layout with Integrated Sidebar */}
-      <div className="flex-1 min-h-0">
+      <section className="relative flex-1 min-h-0">
         <AILearningGraph />
-      </div>
-    </div>
+      </section>
+    </main>
   );
 }
diff --git a/components/AILearningGraph.tsx b/components/AILearningGraph.tsx
index 37f64c4..715538a 100644
--- a/components/AILearningGraph.tsx
+++ b/components/AILearningGraph.tsx
@@ -250,8 +250,8 @@ function AILearningGraphFlow() {
   return (
     <div className="h-full flex flex-col">
       {/* Horizontal Navigation Bar with All Panels */}
-      <div className="bg-white border-b border-gray-200 flex-shrink-0 overflow-x-auto">
-        <div className="flex items-center gap-6 p-3 min-w-max">
+      <div className="bg-white border-b border-gray-200 flex-shrink-0">
+        <div className="flex items-center gap-6 p-3 min-w-max overflow-x-auto">
           {/* Progress Panel - Compact Horizontal */}
           <div className="flex items-center gap-3 px-3 py-2 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
             <div className="flex items-center gap-2">
diff --git a/components/graph/CardNode.tsx b/components/graph/CardNode.tsx
index f2697fa..140b8a9 100644
--- a/components/graph/CardNode.tsx
+++ b/components/graph/CardNode.tsx
@@ -9,7 +9,8 @@ import {
   Columns2,
 } from "lucide-react";
 import { TopicNode, TopicStatus } from "@/lib/types";
-import { clusterLabels, clusterColors } from "@/lib/constants";
+import { clusterLabels } from "@/lib/constants";
+import { getClusterStyle } from "@/lib/map-constants";
 
 export type CardNodeData = {
   topic: TopicNode;
@@ -43,29 +44,32 @@ export const CardNode: React.FC<{ data: CardNodeData }> = ({ data }) => {
   const [open, setOpen] = React.useState(false);
 
   const base = compact
-    ? "rounded-lg border-2 p-2 shadow-sm min-w-[180px] max-w-[280px] bg-white"
-    : "rounded-2xl border-2 p-3 shadow-sm min-w-[220px] max-w-[320px] sm:min-w-[260px] sm:max-w-[360px] bg-white";
+    ? "rounded-lg border-2 p-2 shadow-sm min-w-[180px] max-w-[280px]"
+    : "rounded-2xl border-2 p-3 shadow-sm min-w-[220px] max-w-[320px] sm:min-w-[260px] sm:max-w-[360px]";
 
-  const cluster = clusterColors[topic.cluster] || "bg-white";
+  const clusterStyle = getClusterStyle(topic.cluster);
 
   // Status-based border colors as per requirements
-  const statusBorders: Record<TopicStatus, string> = {
-    locked: "border-gray-300",
-    available: "border-blue-400",
-    completed: "border-green-500",
+  const statusColors: Record<TopicStatus, string> = {
+    locked: "#d1d5db", // gray-300
+    available: "#60a5fa", // blue-400
+    completed: "#10b981", // green-500
   };
 
-  const statusClasses = `${statusBorders[status]} ${
-    locked ? "opacity-50 grayscale" : ""
-  }`;
+  const statusClasses = `${locked ? "opacity-50 grayscale" : ""}`;
 
   return (
     <motion.div
       whileHover={{ scale: 1.05 }}
       whileTap={{ scale: 0.98 }}
-      className={`${base} ${cluster} ${statusClasses} ${
+      className={`${base} ${statusClasses} ${
         isGoal ? "ring-2 ring-yellow-400 shadow-lg" : ""
       }`}
+      style={{
+        background: clusterStyle.background,
+        borderColor: statusColors[status],
+        color: clusterStyle.text,
+      }}
       transition={{ type: "spring", stiffness: 300, damping: 20 }}
     >
       <div className="flex items-start gap-2 sm:gap-3">
diff --git a/components/graph/ClusterVisualization.tsx b/components/graph/ClusterVisualization.tsx
index c4393cc..540fb28 100644
--- a/components/graph/ClusterVisualization.tsx
+++ b/components/graph/ClusterVisualization.tsx
@@ -82,18 +82,66 @@ export const ClusterVisualization: React.FC<ClusterVisualizationProps> = ({
       style={{ zIndex: 1 }}
       data-testid="cluster-visualization"
     >
-      
       <AnimatePresence mode="sync">
-        {clusterData.map((cluster) => (
-          <ClusterShape
-            key={`${cluster.clusterId}-${style}`} // Force re-render on style change
-            clusterData={cluster}
-            isHovered={hoveredCluster === cluster.clusterId}
-            zoomLevel={zoomLevel}
-            onHover={handleClusterHover}
-            onClick={onClusterClick}
-          />
-        ))}
+        {clusterData.map((cluster) => {
+          const { clusterId, bounds, nodes: clusterNodes } = cluster;
+          const completionPct = Math.round(
+            (clusterNodes.filter((node) => completedNodes.has(node.id)).length /
+              clusterNodes.length) *
+              100
+          );
+
+          return (
+            <motion.div
+              key={`${clusterId}-${style}`}
+              className="absolute pointer-events-auto"
+              style={{
+                left: bounds.minX,
+                top: bounds.minY,
+                width: bounds.width,
+                height: bounds.height,
+              }}
+              initial={{ opacity: 0, scale: 0.8 }}
+              animate={{ opacity: 1, scale: 1 }}
+              exit={{ opacity: 0, scale: 0.8 }}
+              transition={{
+                duration: CLUSTER_VIZ_CONSTANTS.ANIMATION.DURATION / 1000,
+                ease: "easeOut",
+              }}
+              onMouseEnter={() => onClusterHover?.(clusterId)}
+              onMouseLeave={() => onClusterHover?.(null)}
+              onClick={() => onClusterClick?.(clusterId)}
+            >
+              <div
+                className="w-full h-full cursor-pointer"
+                style={generateClusterCSS(
+                  cluster,
+                  hoveredCluster === clusterId,
+                  zoomLevel
+                )}
+              >
+                {style === "label-positioning" && (
+                  <div
+                    className="absolute flex items-center justify-center text-white font-bold text-sm pointer-events-none"
+                    style={{
+                      left: bounds.width / 2 - 40,
+                      top: bounds.height / 2 - 10,
+                      width: 80,
+                      height: 20,
+                      backgroundColor:
+                        CLUSTER_VIZ_CONSTANTS.LABEL_POSITIONING
+                          .BACKGROUND_COLOR,
+                      borderRadius:
+                        CLUSTER_VIZ_CONSTANTS.LABEL_POSITIONING.BORDER_RADIUS,
+                    }}
+                  >
+                    {clusterId} ({completionPct}%)
+                  </div>
+                )}
+              </div>
+            </motion.div>
+          );
+        })}
       </AnimatePresence>
     </div>
   );
diff --git a/components/graph/DependencyGraph.tsx b/components/graph/DependencyGraph.tsx
index d1312b3..785514b 100644
--- a/components/graph/DependencyGraph.tsx
+++ b/components/graph/DependencyGraph.tsx
@@ -12,6 +12,7 @@ import ReactFlow, {
   Controls,
   MiniMap,
   useReactFlow,
+  useStore,
   Position,
   MarkerType,
 } from "reactflow";
@@ -90,6 +91,12 @@ export const DependencyGraph: React.FC<DependencyGraphProps> = ({
   const [isZooming, setIsZooming] = useState(false);
   const zoomTimeoutRef = useRef<NodeJS.Timeout>();
 
+  // Track user interaction to suppress auto fitView during manual pan/zoom
+  const isUserInteractingRef = useRef(false);
+
+  // Get current viewport transform so overlays follow pan/zoom
+  const [tx, ty, k] = useStore((s) => s.transform);
+
   // Convert clusterStyle to proper ClusterVisualizationStyle
   const clusterVisualizationStyle: ClusterVisualizationStyle = useMemo(() => {
     const styleMap: Record<string, ClusterVisualizationStyle> = {
@@ -260,8 +267,8 @@ export const DependencyGraph: React.FC<DependencyGraphProps> = ({
     if (compact) return "compact";
 
     // More dramatic size differences based on view level
-    if (viewLevel === "overview") return "compact"; // Always compact in overview
-    if (viewLevel === "detail") return "expanded"; // Always expanded in detail
+    if (viewLevel === "overview") return "compact"; // Always compact in overview for density
+    if (viewLevel === "detail") return "expanded"; // Always expanded in detail for clarity
     if (focusedCluster) return "expanded"; // Expanded when cluster focused
 
     return "standard"; // Standard for cluster view
@@ -272,8 +279,8 @@ export const DependencyGraph: React.FC<DependencyGraphProps> = ({
     const edges = buildEdges(filteredNodes);
     const sizeVariant = getSizeVariant();
 
-    // FIXED: Use zoomLevel to determine layout strategy, not just focusedCluster
-    if (focusedCluster) {
+    // FIXED: Use zoomLevel to determine layout strategy with dramatic differences
+    if (viewLevel === "cluster" && focusedCluster) {
       // Cluster focus mode - tight layout around specific cluster
       return layoutClusterFocus(
         filteredNodes,
@@ -283,19 +290,24 @@ export const DependencyGraph: React.FC<DependencyGraphProps> = ({
         sizeVariant
       );
     } else if (viewLevel === "overview") {
-      // Overview mode - spread out layout showing all clusters
-      return layoutOverview(filteredNodes, edges, layoutDir, sizeVariant);
+      // Overview mode - much more compact layout showing all clusters
+      return layoutDagre(filteredNodes, edges, layoutDir, sizeVariant, {
+        clusterSpacing: true,
+        nodeSpacing: 0.6, // Much tighter spacing
+        expandedSpacing: false,
+      });
     } else if (viewLevel === "detail") {
-      // Detail mode - expanded layout with more spacing
+      // Detail mode - much more expanded layout with larger spacing
       return layoutDagre(filteredNodes, edges, layoutDir, sizeVariant, {
         clusterSpacing: true,
-        expandedSpacing: true, // Add extra spacing for detail view
-        nodeSpacing: 1.5, // 50% more spacing between nodes
+        expandedSpacing: true,
+        nodeSpacing: 2.0, // Much more spacing between nodes
       });
     } else {
       // Cluster mode - standard balanced layout
       return layoutDagre(filteredNodes, edges, layoutDir, sizeVariant, {
         clusterSpacing: true,
+        nodeSpacing: 1.0, // Standard spacing
       });
     }
   }, [
@@ -381,6 +393,8 @@ export const DependencyGraph: React.FC<DependencyGraphProps> = ({
 
   // ENHANCED: Auto-adjust view when cluster focus changes with proper recentering
   useEffect(() => {
+    if (isUserInteractingRef.current) return;
+
     if (focusedCluster && !isZooming) {
       // When focusing on a cluster, automatically adjust to cluster view if in overview
       if (viewLevel === "overview") {
@@ -409,6 +423,8 @@ export const DependencyGraph: React.FC<DependencyGraphProps> = ({
 
   // ENHANCED: Force re-render and reposition when view level changes
   useEffect(() => {
+    if (isUserInteractingRef.current) return;
+
     if (!isZooming && layoutedNodes.length > 0) {
       // Immediate fit view when layout changes due to view level
       const delay = viewLevel === "overview" ? 300 : 200;
@@ -630,6 +646,8 @@ export const DependencyGraph: React.FC<DependencyGraphProps> = ({
 
   // Auto-fit view when nodes change - FIXED: Only when not zooming
   useEffect(() => {
+    if (isUserInteractingRef.current) return;
+
     if (rfNodes.length > 0 && !isZooming) {
       debouncedFitView(fitView, 500);
     }
@@ -660,6 +678,22 @@ export const DependencyGraph: React.FC<DependencyGraphProps> = ({
         nodesDraggable={false} // Disable dragging for consistent layout
         nodesConnectable={false} // Disable connection creation
         elementsSelectable={true} // Allow selection for better UX
+        onMoveStart={() => {
+          isUserInteractingRef.current = true;
+        }}
+        onMoveEnd={() => {
+          setTimeout(() => {
+            isUserInteractingRef.current = false;
+          }, 150);
+        }}
+        onNodeClick={(e, node) => {
+          fitView({
+            nodes: [{ id: node.id }],
+            padding: viewLevel === "detail" ? 0.05 : 0.15,
+            duration: 400,
+            includeHiddenNodes: false,
+          });
+        }}
       >
         {/* Enhanced MiniMap with cluster colors */}
         <MiniMap
@@ -715,15 +749,25 @@ export const DependencyGraph: React.FC<DependencyGraphProps> = ({
         />
 
         {/* FIXED: Cluster Visualization Layer - Ensure proper rendering */}
-        <ClusterVisualization
-          nodes={filteredNodes}
-          nodePositions={nodePositions}
-          completedNodes={completedNodes}
-          style={clusterVisualizationStyle}
-          zoomLevel={currentZoom}
-          onClusterHover={handleClusterHover}
-          onClusterClick={handleClusterClick}
-        />
+        {/* Cluster overlays should live in a layer that follows the viewport transform */}
+        <div
+          className="absolute top-0 left-0 pointer-events-none"
+          style={{
+            transform: `translate(${tx}px, ${ty}px) scale(${k})`,
+            transformOrigin: "0 0",
+            zIndex: 0, // below nodes, above background
+          }}
+        >
+          <ClusterVisualization
+            nodes={filteredNodes}
+            nodePositions={nodePositions}
+            completedNodes={completedNodes}
+            style={clusterVisualizationStyle}
+            zoomLevel={k}
+            onClusterHover={handleClusterHover}
+            onClusterClick={handleClusterClick}
+          />
+        </div>
       </ReactFlow>
 
       {/* Visual Legend */}
